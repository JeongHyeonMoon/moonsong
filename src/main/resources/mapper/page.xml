<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.nts.moonsong.page.repository.PageRepository">
	<select id = "selectCategorys" resultType="com.nts.moonsong.category.model.Category">
		SELECT
			category_id AS categoryId
			, category_name AS categoryName
		FROM
			_category
	</select>
	<select id="isExistPageByTitle" resultType="java.lang.Boolean" parameterType="java.lang.String">
		SELECT EXISTS(
			(SELECT 
				1
			FROM
				_page 
			WHERE
				page_title = #{pageTitle} 
			)
		)
	</select>
	
	<insert id="insertPage" useGeneratedKeys="true" keyProperty="pageId" parameterType="com.nts.moonsong.page.model.Page">
		INSERT INTO _page(
			page_title
			, category_id
			, content
			, writer_id
		)
		VALUES(
			#{pageTitle}
			, #{categoryId}
			, #{content}
			, #{writerId}
		)
	</insert>
	<select id="selectPages" resultType="com.nts.moonsong.page.dto.PageView">
		SELECT 
			p.page_id
		    , p.page_title
		    , p.content
		    , (SELECT 
		    		nickname 
		    	FROM 
		    		_member mm 
		    	WHERE 
		    		mm.member_id = p.writer_id
		    	) AS writerNickname
		    , c.category_name
		    , p.reg_date
		    , (SELECT 
		    		nickname
		    	FROM 
		    		_member mm  
		    	WHERE 
		    		mm.member_id = op.owner_id 
		    	) AS owerNickname
		    , phone_number
		    , s.section_name
		    , op.start_time
		    , op.end_time
		FROM
			_page p 
		INNER JOIN 
			_category c 
		ON 
			p.category_id = c.category_id
		INNER JOIN 
			_owned_page op 
		ON 
			p.page_id = op.page_id
		INNER JOIN 
			_section s 
		ON 
			op.section_id = s.section_id
	</select>	
	<select id="selectByPageId" parameterType="java.lang.Long" resultType="com.nts.moonsong.page.dto.PageView">
		SELECT 
			p.page_id AS pageId
		    , p.page_title AS pageTitle
		    , p.content AS content
		    , p.writer_id AS writerId
		    , p.authorized AS isAuthorized
		    , (SELECT 
		    		nickname 
		    	FROM 
		    		_member mm 
		    	WHERE 
		    		mm.member_id = p.writer_id
		    	) AS writerNickname
		    , c.category_id AS categoryId
		    , c.category_name AS categoryName
		    , p.reg_date AS regDate
		    , (SELECT 
		    		nickname
		    	FROM 
		    		_member mm  
		    	WHERE 
		    		mm.member_id = op.owner_id 
		    	) AS ownerNickname
		    , op.owner_id AS ownerId
		    , phone_number AS phoneNumber
		    , s.section_id AS sectionId
		    , s.section_name AS sectionName
		    , op.start_time AS startTime
		    , op.end_time AS endTime
		    , op.address AS address
		FROM
			_page p 
		LEFT OUTER JOIN 
			_category c 
		ON 
			p.category_id = c.category_id
		LEFT OUTER JOIN 
			_owned_page op 
		ON 
			p.page_id = op.page_id
		LEFT OUTER JOIN 
			_section s 
		ON 
			op.section_id = s.section_id
		WHERE
			p.page_id = #{pageId}
	</select>
	
	<update id ="updatePage" parameterType="com.nts.moonsong.page.dto.PageView">
		UPDATE
			_page
		SET
			page_title = #{pageTitle}
			, content = #{content}
		WHERE
			page_id = #{pageId}
	</update>
	
	<update id ="updateOwnerPage" parameterType="com.nts.moonsong.page.dto.PageView">
		UPDATE
			_owned_page
		SET
			address = #{address}
			, phone_number = #{phoneNumber}
			, section_id = #{sectionId}
			, start_time = #{startTime}
			, end_time = #{endTime}
		WHERE
			page_id = #{pageId}
	</update>
	<insert id="insertPageLog">
		INSERT INTO _page_log(
			page_id
			, page_title
			, content
			, category_id
			, authorized
			, owner_id
			, address
			, phone_number
			, section_id
			, start_time
			, end_time
			, changer_id
		)
		VALUES(
			#{page.pageId}
			, #{page.pageTitle}
			, #{page.content}
			, #{page.categoryId}
			, #{page.isAuthorized}
			, #{page.ownerId}
			, #{page.address}
			, #{page.phoneNumber}
			, #{page.sectionId}
			, #{page.startTime}
			, #{page.endTime}
			, #{loginId}
		)
	</insert>
	
	<select id="selectPageViewByKeyword" resultType="com.nts.moonsong.page.dto.PageView">
		(SELECT		
			a.page_id AS pageId
			, a.page_title AS pageTitle
			, a.content AS content
			, a.writer_id AS writerId
			, a.category_id AS categoryId
			, a.reg_date AS regDate
			, a.authorized AS isAuthorized
			, b.ownerId AS ownerId
			, b.address AS address
			, b.phoneNumber AS phoneNumber
			, b.sectionId AS sectionId
			, b.sectionName AS sectionName
			, e.category_name AS categoryName
		FROM 
			_page a
		LEFT OUTER JOIN
			_category e
		ON
			a.category_id = e.category_id
		LEFT OUTER JOIN (
			SELECT	
				c.page_id AS pageId
				, c.owner_id AS ownerId
				, c.address AS address
				, c.phone_number AS phoneNumber
				, c.section_id AS sectionId
				, d.section_name AS sectionName
			FROM 
				_owned_page c
			LEFT OUTER JOIN 
				_section d
			ON 
				c.section_id = d.section_id
		) b
		ON 
			a.page_id = b.pageId
		WHERE 
			a.page_title LIKE CONCAT('%', #{keyword},'%')
		)
		UNION
		(SELECT		
			a.page_id AS pageId
			, a.page_title AS pageTitle
			, a.content AS content
			, a.writer_id AS writerId
			, a.category_id AS categoryId
			, a.reg_date AS regDate
			, a.authorized AS isAuthorized
			, b.ownerId AS ownerId
			, b.address AS address
			, b.phoneNumber AS phoneNumber
			, b.sectionId AS sectionId
			, b.sectionName AS sectionName
			, e.category_name AS categoryName
		FROM 
			_page a
		LEFT OUTER JOIN
			_category e
		ON
			a.category_id = e.category_id
		LEFT OUTER JOIN (
				SELECT	
						c.page_id AS pageId
						, c.owner_id AS ownerId
						, c.address
						, c.phone_number AS phoneNumber
						, c.section_id AS sectionId
						, d.section_name AS sectionName
				FROM 
					_owned_page c
				LEFT OUTER JOIN 
					_section d
				ON 
					c.section_id = d.section_id
			) b
			ON 
				a.page_id = b.pageId
		WHERE 
			a.page_id IN (
				SELECT 
					b.page_id
				FROM 
					_tag a
				LEFT OUTER JOIN
					_page_tag b
				ON
					a.tag_id = b.tag_id
				WHERE 
					a.tag_name = #{keyword}
			)
		)
		ORDER BY 
			isAuthorized DESC, regDate DESC
		LIMIT 
			#{startIndex}, #{offset}
	</select>

	<select id = "selectContentById" parameterType="java.lang.Long" resultType="String">
		SELECT
			content
		FROM
			_page
		WHERE
			page_id = #{pageId}
	</select>

	<select id ="selectPageLogs" parameterType= "java.lang.Long" resultType="com.nts.moonsong.page.dto.PageLogView">
		SELECT
			page_id AS pageId
			, content
		    , authorized
		    , (SELECT 
		    		c.category_name 
		    	FROM 
		    		_category c 
		    	WHERE 
		    		c.category_id = pl.category_id
		    	) AS categoryName
		    , page_title AS pageTitle
		    , (SELECT 
		    		mm.nickname 
		    	FROM 
		    		_member mm 
		    	WHERE 
		    		mm.member_id = pl.owner_id
		    	) AS ownerNickname
		    , address
		    , phone_number AS phoneNumber
		    , (SELECT 
		    		s.section_name 
		    	FROM 
		    		_section s 
		    	WHERE 
		    		s.section_id = pl.section_id
		    	) AS sectionName
		    , start_time AS startTime
		    , end_time AS endTime
			, chg_date AS changeDate
		    , (SELECT 
		    		m.nickname 
		    	FROM 
		    		_member m 
		    	WHERE 
		    		m.member_id = pl.changer_id
		    	) AS changerNicname
		FROM
			_page_log pl
		WHERE
			page_id = #{pageId};
	</select>
	<select id="isExistRequestPage" parameterType="java.lang.Long" resultType="java.lang.Boolean">
		SELECT 
		EXISTS (
			SELECT 
				1 
			FROM 
				_request_page 
			WHERE 
				page_id = #{pageId}
			)
	</select>
	<select id="isAuthoriedPage" parameterType="java.lang.Long" resultType="java.lang.Boolean">
		SELECT 
		EXISTS (
			SELECT 
				1 
			FROM 
				_page
			WHERE 
				authorized = 1 
			AND 
				page_id = #{pageId}
			)
	</select>
	<delete id="deletePage" parameterType="java.lang.Long">
		DELETE FROM
			_page
		WHERE
			page_id = #{pageId}
	</delete>
	<update id="downAuthority" parameterType="java.lang.Long">
		UPDATE
			_page
		SET
			authorized = 0
		WHERE
			page_id = #{pageId}
	</update>
	<delete id = "deleteOwnedPage" >
		DELETE FROM
			_owned_page
		WHERE
			page_id = #{pageId}
		AND
			owner_id = #{loginId}
	</delete>
</mapper>
